open! Core
open! Bonsai_web

(** The functions in this module can be hard to understand
    Please look at the examples in lib/bonsai/examples/forms/typed.ml *)

module Record : sig
  module type S = sig
    module Typed_field : Typed_fields_lib.S

    (** For each of the fields in your record, you need to provide a form
        component which produces values of that type. *)
    val form_for_field : 'a Typed_field.t -> 'a Form.t Computation.t
  end

  val make : (module S with type Typed_field.derived_on = 'a) -> 'a Form.t Computation.t
end

module Variant : sig
  module type S = sig
    (**  This module should be generated by deriving [typed_variants] on a
         sum type. *)
    module Typed_variant : Typed_variants_lib.S

    (** For each of the variants in your sum type, you need to provide a form
        component which produces values of that type. *)
    val form_for_variant : 'a Typed_variant.t -> 'a Form.t Computation.t
  end

  val make : (module S with type Typed_variant.derived_on = 'a) -> 'a Form.t Computation.t
end
